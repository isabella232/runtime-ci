#!/bin/bash -exu

update_release() {
  local release_sha
  release_sha=$(sha1sum compiled-release-tarball/*.tgz | awk '{print $1}')
  local release_tarball
  pushd compiled-release-tarball
    # shellcheck disable=SC2035
    release_tarball=$(ls *.tgz)
  popd
  local release_version
  release_version=$(cat bosh-io-release/version)

  update_release_ops_file=$(mktemp)
(
cat << EOF
---
- type: replace
  path: /path=~1releases~1name=${RELEASE_NAME}~1url?
  value:
    type: replace
    path: /releases/name=${RELEASE_NAME}/url
    value: https://storage.googleapis.com/cf-deployment-compiled-releases/${release_tarball}
- type: replace
  path: /path=~1releases~1name=${RELEASE_NAME}~1version?
  value:
    type: replace
    path: /releases/name=${RELEASE_NAME}/version
    value: "${release_version}"
- type: replace
  path: /path=~1releases~1name=${RELEASE_NAME}~1sha1?
  value:
    type: replace
    path: /releases/name=${RELEASE_NAME}/sha1
    value: "${release_sha}"
EOF
) > "${update_release_ops_file}"

  bosh interpolate ops-files/operations/use-compiled-releases.yml -o "${update_release_ops_file}" > updated-compiled-releases-ops-file/use-compiled-releases.yml
}

update_commit_message() {
    local current_commit_message=$(cat commit-message/${COMMIT_MESSAGE_PATH})
    if [[ $current_commit_message = *"No manifest release or stemcell version updates"* ]]; then
        echo "Updated compiled releases with ${RELEASE_NAME} ${release_version}" > commit-message/${COMMIT_MESSAGE_PATH}
    fi
}

main() {
  update_release
  update_commit_message
}

main
